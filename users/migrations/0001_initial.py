# Generated by Django 2.2b1 on 2019-03-19 07:30

import django.utils.timezone
from django.db import migrations, models

import core.tasks.mixin
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("password", models.CharField(max_length=255)),
                ("is_email_verified", models.BooleanField(default=False)),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("birthday", models.DateField()),
                ("phone", models.CharField(max_length=255)),
                ("website", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("street", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=255)),
                ("zip", models.CharField(max_length=255)),
                ("residence_country_code", models.CharField(max_length=255)),
                ("nationality_country_code", models.CharField(max_length=255)),
                ("image_url", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "drivers_license_photo_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "id_photo_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "business_license_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "declared_as_seller",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "invoice_street",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "invoice_city",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "invoice_zip",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("company_name", models.CharField(max_length=255)),
                ("company_type", models.CharField(max_length=255)),
                ("vat_id", models.CharField(blank=True, max_length=255, null=True)),
                ("tax_id", models.CharField(max_length=255)),
                (
                    "company_registration_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "association_registration_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "organic_control_body",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "is_certified_organic_producer",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "mangopay_user_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "mangopay_user_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "mangopay_validation_level",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("bank", models.CharField(blank=True, max_length=255, null=True)),
                ("bic", models.CharField(blank=True, max_length=255, null=True)),
                ("iban", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            bases=(core.tasks.mixin.TasksMixin, models.Model),
            managers=[("objects", users.models.user.UserManager()),],
        ),
    ]
